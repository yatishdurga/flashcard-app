{
  "version": 3,
  "sources": ["../../src/AuthContext.ts", "../../src/AuthProvider.tsx", "../../src/AuthState.ts", "../../src/reducer.ts", "../../src/utils.ts", "../../src/useAuth.ts", "../../src/withAuth.tsx", "../../src/withAuthenticationRequired.tsx"],
  "sourcesContent": ["import React from \"react\";\nimport type {\n    UserManagerSettings, UserManagerEvents, User, SessionStatus,\n    SigninPopupArgs, SigninSilentArgs, SigninRedirectArgs,\n    SignoutRedirectArgs, SignoutPopupArgs, QuerySessionStatusArgs,\n    RevokeTokensTypes, SignoutSilentArgs, SigninResourceOwnerCredentialsArgs,\n} from \"oidc-client-ts\";\n\nimport type { AuthState } from \"./AuthState\";\n\n/**\n * @public\n */\nexport interface AuthContextProps extends AuthState {\n    /**\n     * UserManager functions. See [UserManager](https://github.com/authts/oidc-client-ts) for more details.\n     */\n    readonly settings: UserManagerSettings;\n    readonly events: UserManagerEvents;\n    clearStaleState(): Promise<void>;\n    removeUser(): Promise<void>;\n    signinPopup(args?: SigninPopupArgs): Promise<User>;\n    signinSilent(args?: SigninSilentArgs): Promise<User | null>;\n    signinRedirect(args?: SigninRedirectArgs): Promise<void>;\n    signinResourceOwnerCredentials(args: SigninResourceOwnerCredentialsArgs): Promise<User>;\n    signoutRedirect(args?: SignoutRedirectArgs): Promise<void>;\n    signoutPopup(args?: SignoutPopupArgs): Promise<void>;\n    signoutSilent(args?: SignoutSilentArgs): Promise<void>;\n    querySessionStatus(args?: QuerySessionStatusArgs): Promise<SessionStatus | null>;\n    revokeTokens(types?: RevokeTokensTypes): Promise<void>;\n    startSilentRenew(): void;\n    stopSilentRenew(): void;\n}\n\n/**\n * @public\n */\nexport const AuthContext = React.createContext<AuthContextProps | undefined>(undefined);\nAuthContext.displayName = \"AuthContext\";\n", "import React from \"react\";\nimport { UserManager, type UserManagerSettings, User } from \"oidc-client-ts\";\nimport type {\n    ProcessResourceOwnerPasswordCredentialsArgs,\n    SignoutResponse,\n} from \"oidc-client-ts\";\n\nimport { AuthContext } from \"./AuthContext\";\nimport { initialAuthState } from \"./AuthState\";\nimport { reducer } from \"./reducer\";\nimport { hasAuthParams, signinError, signoutError } from \"./utils\";\n\n/**\n * @public\n */\nexport interface AuthProviderBaseProps {\n    /**\n     * The child nodes your Provider has wrapped\n     */\n    children?: React.ReactNode;\n\n    /**\n     * On sign in callback hook. Can be a async function.\n     * Here you can remove the code and state parameters from the url when you are redirected from the authorize page.\n     *\n     * ```jsx\n     * const onSigninCallback = (_user: User | undefined): void => {\n     *     window.history.replaceState(\n     *         {},\n     *         document.title,\n     *         window.location.pathname\n     *     )\n     * }\n     * ```\n     */\n    onSigninCallback?: (user: User | undefined) => Promise<void> | void;\n\n    /**\n     * By default, if the page url has code/state params, this provider will call automatically the `userManager.signinCallback`.\n     * In some cases the code might be for something else (another OAuth SDK perhaps). In these\n     * instances you can instruct the client to ignore them.\n     *\n     * ```jsx\n     * <AuthProvider\n     *   skipSigninCallback={window.location.pathname === \"/stripe-oauth-callback\"}\n     * >\n     * ```\n     */\n    skipSigninCallback?: boolean;\n\n    /**\n      * Match the redirect uri used for logout (e.g. `post_logout_redirect_uri`)\n      * This provider will then call automatically the `userManager.signoutCallback`.\n      *\n      * HINT:\n      * Do not call `userManager.signoutRedirect()` within a `React.useEffect`, otherwise the\n      * logout might be unsuccessful.\n      *\n      * ```jsx\n      * <AuthProvider\n      *   matchSignoutCallback={(args) => {\n      *     window &&\n      *     (window.location.href === args.post_logout_redirect_uri);\n      *   }}\n      * ```\n      */\n    matchSignoutCallback?: (args: UserManagerSettings) => boolean;\n\n    /**\n     * On sign out callback hook. Can be a async function.\n     * Here you can change the url after the user is signed out.\n     * When using this, specifying `matchSignoutCallback` is required.\n     *\n     * ```jsx\n     * const onSignoutCallback = (resp: SignoutResponse | undefined): void => {\n     *     // go to home after logout\n     *     window.location.pathname = \"\"\n     * }\n     * ```\n     */\n    onSignoutCallback?: (resp: SignoutResponse | undefined) => Promise<void> | void;\n\n    /**\n     * On remove user hook. Can be a async function.\n     * Here you can change the url after the user is removed.\n     *\n     * ```jsx\n     * const onRemoveUser = (): void => {\n     *     // go to home after logout\n     *     window.location.pathname = \"\"\n     * }\n     * ```\n     */\n    onRemoveUser?: () => Promise<void> | void;\n}\n\n/**\n * This interface (default) is used to pass `UserManagerSettings` together with `AuthProvider` properties to the provider.\n *\n * @public\n */\nexport interface AuthProviderNoUserManagerProps extends AuthProviderBaseProps, UserManagerSettings {\n    /**\n     * Prevent this property.\n     */\n    userManager?: never;\n}\n\n/**\n * This interface is used to pass directly a `UserManager` instance together with `AuthProvider` properties to the provider.\n *\n * @public\n */\nexport interface AuthProviderUserManagerProps extends AuthProviderBaseProps {\n    /**\n     * Allow passing a custom UserManager instance.\n     */\n    userManager?: UserManager;\n}\n\n/**\n * @public\n */\nexport type AuthProviderProps = AuthProviderNoUserManagerProps | AuthProviderUserManagerProps;\n\nconst userManagerContextKeys = [\n    \"clearStaleState\",\n    \"querySessionStatus\",\n    \"revokeTokens\",\n    \"startSilentRenew\",\n    \"stopSilentRenew\",\n] as const;\nconst navigatorKeys = [\n    \"signinPopup\",\n    \"signinSilent\",\n    \"signinRedirect\",\n    \"signinResourceOwnerCredentials\",\n    \"signoutPopup\",\n    \"signoutRedirect\",\n    \"signoutSilent\",\n] as const;\nconst unsupportedEnvironment = (fnName: string) => () => {\n    throw new Error(\n        `UserManager#${fnName} was called from an unsupported context. If this is a server-rendered page, defer this call with useEffect() or pass a custom UserManager implementation.`,\n    );\n};\nconst UserManagerImpl =\n    typeof window === \"undefined\" ? null : UserManager;\n\n/**\n * Provides the AuthContext to its child components.\n *\n * @public\n */\nexport const AuthProvider = (props: AuthProviderProps): JSX.Element => {\n    const {\n        children,\n\n        onSigninCallback,\n        skipSigninCallback,\n\n        matchSignoutCallback,\n        onSignoutCallback,\n\n        onRemoveUser,\n\n        userManager: userManagerProp = null,\n        ...userManagerSettings\n    } = props;\n\n    const [userManager] = React.useState(() => {\n        return userManagerProp ??\n            (UserManagerImpl\n                ? new UserManagerImpl(userManagerSettings as UserManagerSettings)\n                : ({ settings: userManagerSettings } as UserManager));\n    });\n\n    const [state, dispatch] = React.useReducer(reducer, initialAuthState);\n    const userManagerContext = React.useMemo(\n        () =>\n            Object.assign(\n                {\n                    settings: userManager.settings,\n                    events: userManager.events,\n                },\n                Object.fromEntries(\n                    userManagerContextKeys.map((key) => [\n                        key,\n                        userManager[key]?.bind(userManager) ??\n                            unsupportedEnvironment(key),\n                    ]),\n                ) as Pick<UserManager, typeof userManagerContextKeys[number]>,\n                Object.fromEntries(\n                    navigatorKeys.map((key) => [\n                        key,\n                        userManager[key]\n                            ? async (args: ProcessResourceOwnerPasswordCredentialsArgs & never[]) => {\n                                dispatch({\n                                    type: \"NAVIGATOR_INIT\",\n                                    method: key,\n                                });\n                                try {\n                                    return await userManager[key](args);\n                                } catch (error) {\n                                    dispatch({ type: \"ERROR\", error: error as Error });\n                                    return null;\n                                } finally {\n                                    dispatch({ type: \"NAVIGATOR_CLOSE\" });\n                                }\n                            }\n                            : unsupportedEnvironment(key),\n                    ]),\n                ) as Pick<UserManager, typeof navigatorKeys[number]>,\n            ),\n        [userManager],\n    );\n    const didInitialize = React.useRef(false);\n\n    React.useEffect(() => {\n        if (!userManager || didInitialize.current) {\n            return;\n        }\n        didInitialize.current = true;\n\n        void (async (): Promise<void> => {\n            // sign-in\n            try {\n                let user: User | undefined | null = null;\n\n                // check if returning back from authority server\n                if (hasAuthParams() && !skipSigninCallback) {\n                    user = await userManager.signinCallback();\n                    onSigninCallback && await onSigninCallback(user);\n                }\n                user = !user ? await userManager.getUser() : user;\n                dispatch({ type: \"INITIALISED\", user });\n            } catch (error) {\n                dispatch({ type: \"ERROR\", error: signinError(error) });\n            }\n\n            // sign-out\n            try {\n                if (matchSignoutCallback && matchSignoutCallback(userManager.settings)) {\n                    const resp = await userManager.signoutCallback();\n                    onSignoutCallback && await onSignoutCallback(resp);\n                }\n            } catch (error) {\n                dispatch({ type: \"ERROR\", error: signoutError(error) });\n            }\n        })();\n    }, [userManager, skipSigninCallback, onSigninCallback, onSignoutCallback, matchSignoutCallback]);\n\n    // register to userManager events\n    React.useEffect(() => {\n        if (!userManager) return undefined;\n        // event UserLoaded (e.g. initial load, silent renew success)\n        const handleUserLoaded = (user: User) => {\n            dispatch({ type: \"USER_LOADED\", user });\n        };\n        userManager.events.addUserLoaded(handleUserLoaded);\n\n        // event UserUnloaded (e.g. userManager.removeUser)\n        const handleUserUnloaded = () => {\n            dispatch({ type: \"USER_UNLOADED\" });\n        };\n        userManager.events.addUserUnloaded(handleUserUnloaded);\n\n        // event UserSignedOut (e.g. user was signed out in background (checkSessionIFrame option))\n        const handleUserSignedOut = () => {\n            dispatch({ type: \"USER_SIGNED_OUT\" });\n        };\n        userManager.events.addUserSignedOut(handleUserSignedOut);\n\n        // event SilentRenewError (silent renew error)\n        const handleSilentRenewError = (error: Error) => {\n            dispatch({ type: \"ERROR\", error });\n        };\n        userManager.events.addSilentRenewError(handleSilentRenewError);\n\n        return () => {\n            userManager.events.removeUserLoaded(handleUserLoaded);\n            userManager.events.removeUserUnloaded(handleUserUnloaded);\n            userManager.events.removeUserSignedOut(handleUserSignedOut);\n            userManager.events.removeSilentRenewError(handleSilentRenewError);\n        };\n    }, [userManager]);\n\n    const removeUser = React.useCallback(async () => {\n        if (!userManager) unsupportedEnvironment(\"removeUser\");\n        await userManager.removeUser();\n        onRemoveUser && await onRemoveUser();\n    }, [userManager, onRemoveUser]);\n\n    const contextValue = React.useMemo(() => {\n        return {\n            ...state,\n            ...userManagerContext,\n            removeUser,\n        };\n    }, [state, userManagerContext, removeUser]);\n\n    return (\n        <AuthContext.Provider value={contextValue}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n", "import type { User } from \"oidc-client-ts\";\n\n/**\n * The auth state which, when combined with the auth methods, make up the return object of the `useAuth` hook.\n *\n * @public\n */\nexport interface AuthState {\n    /**\n     * See [User](https://authts.github.io/oidc-client-ts/classes/User.html) for more details.\n     */\n    user?: User | null;\n\n    /**\n     * True when the library has been initialized and no navigator request is in progress.\n     */\n    isLoading: boolean;\n\n    /**\n     * True while the user has a valid access token.\n     */\n    isAuthenticated: boolean;\n\n    /**\n     * Tracks the status of most recent signin/signout request method.\n     */\n    activeNavigator?: \"signinRedirect\" | \"signinResourceOwnerCredentials\" | \"signinPopup\" | \"signinSilent\" | \"signoutRedirect\" | \"signoutPopup\" | \"signoutSilent\";\n\n    /**\n     * Was there a signin or silent renew error?\n     */\n    error?: Error;\n}\n\n/**\n * The initial auth state.\n */\nexport const initialAuthState: AuthState = {\n    isLoading: true,\n    isAuthenticated: false,\n};\n", "import type { User } from \"oidc-client-ts\";\n\nimport type { AuthState } from \"./AuthState\";\n\ntype Action =\n    | { type: \"INITIALISED\" | \"USER_LOADED\"; user: User | null }\n    | { type: \"USER_UNLOADED\" }\n    | { type: \"USER_SIGNED_OUT\" }\n    | { type: \"NAVIGATOR_INIT\"; method: NonNullable<AuthState[\"activeNavigator\"]> }\n    | { type: \"NAVIGATOR_CLOSE\" }\n    | { type: \"ERROR\"; error: Error };\n\n/**\n * Handles how that state changes in the `useAuth` hook.\n */\nexport const reducer = (state: AuthState, action: Action): AuthState => {\n    switch (action.type) {\n        case \"INITIALISED\":\n        case \"USER_LOADED\":\n            return {\n                ...state,\n                user: action.user,\n                isLoading: false,\n                isAuthenticated: action.user ? !action.user.expired : false,\n                error: undefined,\n            };\n        case \"USER_SIGNED_OUT\":\n        case \"USER_UNLOADED\":\n            return {\n                ...state,\n                user: undefined,\n                isAuthenticated: false,\n            };\n        case \"NAVIGATOR_INIT\":\n            return {\n                ...state,\n                isLoading: true,\n                activeNavigator: action.method,\n            };\n        case \"NAVIGATOR_CLOSE\":\n            // we intentionally don't handle cases where multiple concurrent navigators are open\n            return {\n                ...state,\n                isLoading: false,\n                activeNavigator: undefined,\n            };\n        case \"ERROR\":\n            return {\n                ...state,\n                isLoading: false,\n                error: action.error,\n            };\n        default:\n            return {\n                ...state,\n                isLoading: false,\n                error: new Error(`unknown type ${action[\"type\"] as string}`),\n            };\n    }\n};\n", "/**\n * @public\n */\nexport const hasAuthParams = (location = window.location): boolean => {\n    // response_mode: query\n    let searchParams = new URLSearchParams(location.search);\n    if ((searchParams.get(\"code\") || searchParams.get(\"error\")) &&\n        searchParams.get(\"state\")) {\n        return true;\n    }\n\n    // response_mode: fragment\n    searchParams = new URLSearchParams(location.hash.replace(\"#\", \"?\"));\n    if ((searchParams.get(\"code\") || searchParams.get(\"error\")) &&\n        searchParams.get(\"state\")) {\n        return true;\n    }\n\n    return false;\n};\n\nconst normalizeErrorFn = (fallbackMessage: string) => (error: unknown): Error => {\n    if (error instanceof Error) {\n        return error;\n    }\n    return new Error(fallbackMessage);\n};\n\nexport const signinError = normalizeErrorFn(\"Sign-in failed\");\nexport const signoutError = normalizeErrorFn(\"Sign-out failed\");\n", "import React from \"react\";\n\nimport { AuthContext, type AuthContextProps } from \"./AuthContext\";\n\n/**\n * @public\n */\nexport const useAuth = (): AuthContextProps => {\n    const context = React.useContext(AuthContext);\n\n    if (!context) {\n        console.warn(\"AuthProvider context is undefined, please verify you are calling useAuth() as child of a <AuthProvider> component.\");\n    }\n\n    return context as AuthContextProps;\n};\n", "import React from \"react\";\n\nimport type { AuthContextProps } from \"./AuthContext\";\nimport { useAuth } from \"./useAuth\";\n\n/**\n * A public higher-order component to access the imperative API\n * @public\n */\nexport function withAuth<P>(\n    Component: React.ComponentType<P>,\n): React.ComponentType<Omit<P, keyof AuthContextProps>> {\n    const displayName = `withAuth(${Component.displayName || Component.name})`;\n    const C: React.FC<Omit<P, keyof AuthContextProps>> = (props) => {\n        const auth = useAuth();\n\n        return <Component {...(props as P)} auth={auth} />;\n    };\n\n    C.displayName = displayName;\n\n    return C;\n}\n", "import React from \"react\";\nimport type { SigninRedirectArgs } from \"oidc-client-ts\";\n\nimport { useAuth } from \"./useAuth\";\nimport { hasAuthParams } from \"./utils\";\n\n/**\n * @public\n */\nexport interface WithAuthenticationRequiredProps {\n    /**\n     * Show a message when redirected to the signin page.\n     */\n    OnRedirecting?: () => JSX.Element;\n\n    /**\n     * Allows executing logic before the user is redirected to the signin page.\n     */\n    onBeforeSignin?: () => Promise<void> | void;\n\n    /**\n     * Pass additional signin redirect arguments.\n     */\n    signinRedirectArgs?: SigninRedirectArgs;\n}\n\n/**\n * A public higher-order component to protect accessing not public content. When you wrap your components in this higher-order\n * component and an anonymous user visits your component, they will be redirected to the login page; after logging in, they\n * will return to the page from which they were redirected.\n *\n * @public\n */\nexport const withAuthenticationRequired = <P extends object>(\n    Component: React.ComponentType<P>,\n    options: WithAuthenticationRequiredProps = {},\n): React.FC<P> => {\n    const { OnRedirecting = (): JSX.Element => <></>, onBeforeSignin, signinRedirectArgs } = options;\n    const displayName = `withAuthenticationRequired(${Component.displayName || Component.name})`;\n    const C: React.FC<P> = (props) => {\n        const auth = useAuth();\n\n        React.useEffect(() => {\n            if (hasAuthParams() ||\n                auth.isLoading || auth.activeNavigator || auth.isAuthenticated) {\n                return;\n            }\n            void (async (): Promise<void> => {\n                onBeforeSignin && await onBeforeSignin();\n                await auth.signinRedirect(signinRedirectArgs);\n            })();\n        }, [auth.isLoading, auth.isAuthenticated, auth]);\n\n        return auth.isAuthenticated ? <Component {...props} /> : OnRedirecting();\n    };\n\n    C.displayName = displayName;\n\n    return C;\n};\n"],
  "mappings": "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",
  "names": ["React", "React", "React", "React", "React", "React", "React", "React"]
}
